# ---------------- Interactive flows (capture handlers) ----------------
@Client.on_message(filters.private)
async def capture_caption(client, message):
    user_id = message.from_user.id
    if "caption_set" not in bot_data or user_id not in bot_data["caption_set"]:
        return

    session = bot_data["caption_set"][user_id]
    channel_id = session["channel_id"]
    instr_msg_id = session.get("instr_msg_id")
    caption_text = message.text or message.caption or ""
    caption_text = caption_text.strip() if isinstance(caption_text, str) else ""

    if not caption_text:
        try:
            await message.delete()
        except Exception:
            pass
        await client.send_message(user_id, "‚ùå Please send valid caption text (plain text only).")
        return

    try:
        existing = await get_channel_caption(channel_id)
        if existing:
            await updateCap(channel_id, caption_text)
        else:
            await addCap(channel_id, caption_text)
    except Exception as e:
        print("Error saving caption:", e)

    try:
        await message.delete()
    except Exception:
        pass

    if instr_msg_id:
        try:
            await client.delete_messages(chat_id=user_id, message_ids=instr_msg_id)
        except Exception:
            pass

    buttons = [[InlineKeyboardButton("‚Ü© Back", callback_data=f"setcap_{channel_id}")]]
    try:
        await client.send_message(
            user_id,
            "‚úÖ Caption successfully updated!",
            reply_markup=InlineKeyboardMarkup(buttons)
        )
    except Exception as e:
        print("Error sending confirmation message:", e)

    bot_data["caption_set"].pop(user_id, None)


@Client.on_message(filters.private)
async def capture_block_words(client, message):
    user_id = message.from_user.id
    if user_id not in bot_data.get("block_words_set", {}):
        return

    session = bot_data["block_words_set"][user_id]
    channel_id = session["channel_id"]
    instr_msg_id = session.get("instr_msg_id")

    # Ignore empty messages (Back button already cancels)
    if not message.text or not message.text.strip():
        return

    text = message.text.strip()
    words = [w.strip() for w in re.split(r'[,\n]+', text) if w.strip()]

    if not words:
        await message.reply_text("‚ö†Ô∏è Please send valid text for blocked words.")
        return

    try:
        await set_block_words(channel_id, words)
    except Exception as e:
        print("Error saving blocked words:", e)

    # Clean chat
    try:
        await client.delete_messages(user_id, [message.id, instr_msg_id])
    except Exception:
        pass

    # Confirmation message
    buttons = [[InlineKeyboardButton("‚Ü© Back", callback_data=f"setwords_{channel_id}")]]
    await client.send_message(
        user_id,
        f"‚úÖ Blocked words updated successfully!\n\nüö´ {', '.join(words)}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    # Remove session
    bot_data["block_words_set"].pop(user_id, None)

@Client.on_message(filters.private)
async def capture_suffix_prefix(client, message):
    user_id = message.from_user.id
    if "suffix_set" in bot_data and user_id in bot_data["suffix_set"]:
        session = bot_data["suffix_set"][user_id]
        channel_id = session["channel_id"]
        instr_msg_id = session.get("instr_msg_id")

        if message.text and message.text.strip().lower() == "/cancel":
            await client.send_message(user_id, "‚ùå Process canceled.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü© Back", callback_data=f"set_suffixprefix_{channel_id}")]]))
            bot_data["suffix_set"].pop(user_id, None)
            if instr_msg_id:
                await client.delete_messages(user_id, instr_msg_id)
            return

        suffix_text = message.text.strip()
        await set_suffix(channel_id, suffix_text)
        try:
            await client.delete_messages(user_id, [message.id, instr_msg_id])
        except Exception:
            pass
        await client.send_message(user_id, "‚úÖ Suffix set successfully.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü© Back", callback_data=f"set_suffixprefix_{channel_id}")]]))
        bot_data["suffix_set"].pop(user_id, None)
        return

    # Prefix flow
    if "prefix_set" in bot_data and user_id in bot_data["prefix_set"]:
        session = bot_data["prefix_set"][user_id]
        channel_id = session["channel_id"]
        instr_msg_id = session.get("instr_msg_id")

        if message.text and message.text.strip().lower() == "/cancel":
            await client.send_message(user_id, "‚ùå Process canceled.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü© Back", callback_data=f"set_suffixprefix_{channel_id}")]]))
            bot_data["prefix_set"].pop(user_id, None)
            if instr_msg_id:
                await client.delete_messages(user_id, instr_msg_id)
            return

        prefix_text = message.text.strip()
        await set_prefix(channel_id, prefix_text)
        try:
            await client.delete_messages(user_id, [message.id, instr_msg_id])
        except Exception:
            pass
        await client.send_message(user_id, "‚úÖ Prefix set successfully.", reply_markup=InlineKeyboardMarkup([[InlineKeyboardButton("‚Ü© Back", callback_data=f"set_suffixprefix_{channel_id}")]]))
        bot_data["prefix_set"].pop(user_id, None)
        return


@Client.on_message(filters.private)
async def capture_replace_words(client, message):
    user_id = message.from_user.id
    if user_id not in bot_data.get("replace_words_set", {}):
        return

    session = bot_data["replace_words_set"][user_id]
    channel_id = session["channel_id"]
    instr_msg_id = session.get("instr_msg_id")

    # Ignore empty messages (Back button already cancels)
    if not message.text or not message.text.strip():
        return

    text = message.text.strip()
    pairs = [pair.strip() for pair in text.split(",") if pair.strip()]
    replace_dict = {}

    for pair in pairs:
        parts = pair.split(None, 1)
        if len(parts) == 2:
            old, new = parts
            replace_dict[old] = new

    if not replace_dict:
        await message.reply_text("‚ö†Ô∏è Invalid format. Use: `old new, another_old another_new`")
        return

    try:
        await set_replace_words(channel_id, replace_dict)
    except Exception as e:
        print("Error saving replace words:", e)

    # Clean chat
    try:
        await client.delete_messages(user_id, [message.id, instr_msg_id])
    except Exception:
        pass

    # Confirmation message
    buttons = [[InlineKeyboardButton("‚Ü© Back", callback_data=f"setreplace_{channel_id}")]]
    await client.send_message(
        user_id,
        f"‚úÖ Replace words updated successfully!\n\nüî§ {', '.join([f'{k}‚Üí{v}' for k,v in replace_dict.items()])}",
        reply_markup=InlineKeyboardMarkup(buttons)
    )

    # Remove session
    bot_data["replace_words_set"].pop(user_id, None)
